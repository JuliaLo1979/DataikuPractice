{
  "envSelection": {
    "envName": "Python_DL",
    "envMode": "EXPLICIT_ENV"
  },
  "modeling": {
    "computeLearningCurves": false,
    "max_ensemble_nodes_serialized": 0,
    "pluginAlgoCustomGridSearch": false,
    "keras": {
      "perGPUMemoryFraction": 0.5,
      "stepsPerEpoch": 100,
      "shuffleData": true,
      "buildCode": "from keras.layers import Conv2D, MaxPooling2D, Input\nfrom keras.layers import Dense, BatchNormalization, Activation\nfrom keras.layers import Flatten, Dropout\nfrom keras.models import Model\nfrom keras.optimizers import Adam\n\ndef build_model(input_shapes, n_classes\u003dNone):\n\n    #### DEFINING INPUT AND BASE ARCHITECTURE\n    # You need to modify the name and shape of the \"image_input\" \n    # according to the preprocessing and name of your \n    # initial feature.\n    # This feature should to be preprocessed as an \"Image\", with a \n    # custom preprocessing.\n\n    image_shape \u003d (28, 28, 3)\n    image_input_name \u003d \"path_preprocessed\"\n    \n    image_input \u003d Input(shape\u003dimage_shape, name\u003dimage_input_name)\n\n    #### DEFINING THE ARCHITECTURE -- Better in GPU\n    #x \u003d Conv2D(64, kernel_size\u003d(11, 11), padding\u003d\u0027same\u0027)(image_input)\n    #x \u003d BatchNormalization()(x)\n    #x \u003d Activation(\u0027relu\u0027)(x)\n    #x \u003d MaxPooling2D(pool_size\u003d(3, 3))(x)\n\n    #x \u003d Conv2D(128, kernel_size\u003d(7, 7), padding\u003d\u0027same\u0027)(x)\n    #x \u003d BatchNormalization()(x)\n    #x \u003d Activation(\u0027relu\u0027)(x)\n    #x \u003d MaxPooling2D(pool_size\u003d(3, 3))(x)\n\n    #x \u003d Conv2D(192, kernel_size\u003d(3, 3), padding\u003d\u0027same\u0027)(x)\n    #x \u003d BatchNormalization()(x)\n    #x \u003d Activation(\u0027relu\u0027)(x)\n    #x \u003d MaxPooling2D(pool_size\u003d(3, 3))(x)\n\n    #x \u003d Conv2D(256, kernel_size\u003d(3, 3), padding\u003d\u0027same\u0027)(x)\n    #x \u003d BatchNormalization()(x)\n    #x \u003d Activation(\u0027relu\u0027)(x)\n    #x \u003d MaxPooling2D(pool_size\u003d(3, 3))(x)\n\n    #x \u003d Flatten()(x)\n    #x \u003d Dense(4096)(x)\n    #x \u003d BatchNormalization()(x)\n    #x \u003d Activation(\u0027relu\u0027)(x)\n    #x \u003d Dropout(0.2)(x)\n    #x \u003d Dense(4096)(x)\n    #x \u003d BatchNormalization()(x)\n    #x \u003d Activation(\u0027relu\u0027)(x)\n    #x \u003d Dropout(0.2)(x)\n    #x \u003d Dense(n_classes)(x)\n    #x \u003d BatchNormalization()(x)\n    #x \u003d Activation(\u0027softmax\u0027)(x)\n\n    #model \u003d Model(inputs\u003dimage_input, outputs\u003dx)\n\n    #return model\n\n    x \u003d Conv2D(32, kernel_size\u003d3, padding\u003d\u0027same\u0027, activation\u003d\u0027relu\u0027)(image_input)\n    x \u003d Conv2D(32, kernel_size\u003d3, padding\u003d\u0027same\u0027, activation\u003d\u0027relu\u0027)(x)\n    x \u003d MaxPooling2D(pool_size\u003d(2, 2))(x)\n    x \u003d Flatten()(x)\n    x \u003d Dense(128, activation\u003d\u0027relu\u0027)(x)\n    x \u003d Dropout(0.2)(x)\n    predictions \u003d Dense(n_classes, activation\u003d\u0027softmax\u0027)(x)\n    \n\n    model \u003d Model(inputs\u003dimage_input, outputs\u003dpredictions)\n\n    return model\n\ndef compile_model(model):\n    model.compile(loss\u003d\u0027categorical_crossentropy\u0027,optimizer\u003d\u0027adam\u0027,metrics\u003d[\u0027accuracy\u0027])\n    return model",
      "enabled": true,
      "useGPU": false,
      "kerasInputs": [
        "main",
        "path_preprocessed"
      ],
      "advancedFitMode": false,
      "trainOnAllData": true,
      "gpuAllowGrowth": false,
      "batchSize": 32,
      "epochs": 10,
      "gpuList": [
        0
      ]
    },
    "metrics": {
      "customEvaluationMetricGIB": true,
      "costMatrixWeights": {
        "fpGain": -0.3,
        "tpGain": 1.0,
        "fnGain": 0.0,
        "tnGain": 0.0
      },
      "liftPoint": 0.4,
      "evaluationMetric": "ROC_AUC",
      "customEvaluationMetricNeedsProba": false
    },
    "autoOptimizeThreshold": true,
    "forcedClassifierThreshold": 0.0,
    "grid_search_params": {
      "bayesianOptimizer": "SCIKIT_OPTIMIZE",
      "seed": 0,
      "nIterRandom": 10,
      "nFolds": 5,
      "distributed": false,
      "stratified": true,
      "shuffleIterations": 1,
      "splitRatio": 0.8,
      "timeout": 0,
      "mode": "KFOLD",
      "nJobs": 4,
      "nIter": 0,
      "strategy": "GRID",
      "randomized": true,
      "nContainers": 4
    },
    "skipExpensiveReports": false,
    "algorithm": "KERAS_CODE",
    "gridLength": 10
  },
  "generatingModelId": "A-HANDWRITING-mT3wT8y1-J7mJ5hgr-s19-pp1-m1",
  "preprocessing": {
    "reduce": {
      "kept_variance": 0.0,
      "enabled": false
    },
    "target_remapping": [
      {
        "sampleFreq": 5923,
        "mappedValue": 0,
        "sourceValue": "0"
      },
      {
        "sampleFreq": 6265,
        "mappedValue": 1,
        "sourceValue": "7"
      },
      {
        "sampleFreq": 6131,
        "mappedValue": 2,
        "sourceValue": "3"
      },
      {
        "sampleFreq": 5958,
        "mappedValue": 3,
        "sourceValue": "2"
      },
      {
        "sampleFreq": 5949,
        "mappedValue": 4,
        "sourceValue": "9"
      },
      {
        "sampleFreq": 5863,
        "mappedValue": 5,
        "sourceValue": "6"
      },
      {
        "sampleFreq": 5842,
        "mappedValue": 6,
        "sourceValue": "4"
      },
      {
        "sampleFreq": 5800,
        "mappedValue": 7,
        "sourceValue": "8"
      },
      {
        "sampleFreq": 5421,
        "mappedValue": 8,
        "sourceValue": "5"
      },
      {
        "sampleFreq": 6544,
        "mappedValue": 9,
        "sourceValue": "1"
      }
    ],
    "per_feature": {
      "path": {
        "autoReason": "REJECT_IDENTIFIER",
        "customProcessorWantsMatrix": false,
        "managed_folder_id": "UVAoMwxi",
        "role": "INPUT",
        "missing_handling": "DROP_ROW",
        "sendToInput": "path_preprocessed",
        "customHandlingCode": "from keras.preprocessing.image import img_to_array, load_img\n\n# Custom image preprocessing function.\n# Must return a numpy ndarray representing the image.\n#  - image_file is a file like object\ndef preprocess_image(image_file):\n    img \u003d load_img(image_file,target_size\u003d(28, 28, 3))\n    array \u003d img_to_array(img)\n\n    # Define the actual preprocessing here\n    array \u003d array/255\n\n    return array\n",
        "image_handling": "CUSTOM",
        "state": {
          "autoModifiedByDSS": false,
          "recordedMeaning": "Text",
          "userModified": true
        },
        "type": "IMAGE"
      },
      "Sample": {
        "nb_bins_hashing": 1048576,
        "min_samples": 10,
        "missing_impute_with": "MODE",
        "role": "REJECT",
        "dummy_drop": "NONE",
        "dummy_clip": "MAX_NB_CATEGORIES",
        "cumulative_proportion": 0.95,
        "sendToInput": "main",
        "customHandlingCode": "",
        "type": "CATEGORY",
        "autoReason": "REJECT_ZERO_VARIANCE",
        "customProcessorWantsMatrix": false,
        "missing_handling": "NONE",
        "category_handling": "DUMMIFY",
        "state": {
          "autoModifiedByDSS": false,
          "recordedMeaning": "Text",
          "userModified": false
        },
        "hash_whole_categories": true,
        "max_nb_categories": 100,
        "max_cat_safety": 200
      },
      "label": {
        "customProcessorWantsMatrix": false,
        "quantile_bin_nb_bins": 4,
        "role": "TARGET",
        "generate_derivative": false,
        "sendToInput": "main",
        "customHandlingCode": "",
        "binarize_constant_threshold": 0.0,
        "state": {
          "autoModifiedByDSS": false,
          "recordedMeaning": "LongMeaning",
          "userModified": false
        },
        "type": "NUMERIC",
        "impute_constant_value": 0.0,
        "binarize_threshold_mode": "MEDIAN"
      }
    },
    "skipPreprocessing": false,
    "feature_generation": {
      "polynomial_combinations": {
        "behavior": "DISABLED"
      },
      "manual_interactions": {
        "interactions": []
      },
      "numericals_clustering": {
        "all_features": false,
        "input_features": [],
        "k": 0,
        "behavior": "DISABLED"
      },
      "categoricals_count_transformer": {
        "all_features": false,
        "input_features": [],
        "behavior": "DISABLED"
      },
      "pairwise_linear": {
        "behavior": "DISABLED"
      }
    },
    "preprocessingFitSampleRatio": 1.0,
    "preprocessingFitSampleSeed": 1337,
    "feature_selection_params": {
      "pca_params": {
        "n_features": 25,
        "variance_proportion": 0.9
      },
      "custom_params": {
        "code": "# type your code here"
      },
      "method": "NONE",
      "correlation_params": {
        "min_abs_correlation": 0.0,
        "max_abs_correlation": 1.0,
        "n_features": 25
      },
      "lasso_params": {
        "alpha": [
          0.01,
          0.1,
          1.0,
          10.0,
          100.0
        ],
        "cross_validate": true
      },
      "random_forest_params": {
        "depth": 10,
        "n_trees": 30,
        "n_features": 25
      }
    }
  },
  "backendType": "KERAS",
  "expectedPreparationOutputSchema": {
    "columns": [
      {
        "name": "path",
        "type": "string"
      },
      {
        "name": "Sample",
        "type": "string"
      },
      {
        "name": "label",
        "type": "bigint"
      }
    ],
    "userModified": false
  },
  "script": {
    "columnsSelection": {
      "mode": "ALL"
    },
    "explorationSampling": {
      "_refreshTrigger": 1,
      "selection": {
        "filter": {
          "distinct": false,
          "enabled": false
        },
        "latestPartitionsN": 1,
        "maxRecords": 600000,
        "ordering": {
          "rules": [],
          "enabled": false
        },
        "withinFirstN": -1,
        "partitionSelectionMethod": "ALL",
        "maxStoredBytes": 104857600,
        "targetRatio": 0.02,
        "maxReadUncompressedBytes": -1,
        "samplingMethod": "HEAD_SEQUENTIAL",
        "timeout": -1
      },
      "autoRefreshSample": false
    },
    "explorationFilters": [],
    "exploreUIParams": {},
    "steps": [],
    "maxProcessedMemTableBytes": -1,
    "previewMode": "ALL_ROWS",
    "vizSampling": {
      "_refreshTrigger": 0,
      "autoRefreshSample": false
    },
    "analysisColumnData": {},
    "columnWidthsByName": {},
    "sorting": [],
    "globalSearchQuery": "",
    "coloring": {
      "scheme": "MEANING_AND_STATUS",
      "individualColumns": [],
      "valueColoringMode": "HASH"
    }
  },
  "core": {
    "taskType": "PREDICTION",
    "diagnosticsSettings": {
      "settings": [
        {
          "type": "ML_DIAGNOSTICS_DATASET_SANITY_CHECKS",
          "enabled": true
        },
        {
          "type": "ML_DIAGNOSTICS_MODELING_PARAMETERS",
          "enabled": true
        },
        {
          "type": "ML_DIAGNOSTICS_RUNTIME",
          "enabled": true
        },
        {
          "type": "ML_DIAGNOSTICS_TRAINING_OVERFIT",
          "enabled": true
        },
        {
          "type": "ML_DIAGNOSTICS_LEAKAGE_DETECTION",
          "enabled": true
        },
        {
          "type": "ML_DIAGNOSTICS_MODEL_CHECK",
          "enabled": true
        },
        {
          "type": "ML_DIAGNOSTICS_ML_ASSERTIONS",
          "enabled": true
        }
      ],
      "enabled": true
    },
    "executionParams": {
      "envSelection": {
        "envName": "Python_DL",
        "envMode": "EXPLICIT_ENV"
      },
      "envName": "Python_DL",
      "containerSelection": {
        "containerMode": "INHERIT"
      },
      "sparkParams": {
        "pipelineAllowMerge": true,
        "sparkPreparedDFStorageLevel": "MEMORY_AND_DISK",
        "pipelineAllowStart": true,
        "sparkExecutionEngine": "SPARK_SUBMIT",
        "sparkConf": {
          "inheritConf": "default",
          "conf": []
        },
        "sparkRepartitionNonHDFS": 1,
        "sparkUseGlobalMetastore": false
      },
      "sparkCheckpoint": "NONE"
    },
    "backendType": "KERAS",
    "target_variable": "label",
    "weight": {
      "weightMethod": "NO_WEIGHTING"
    },
    "time": {
      "ascending": true,
      "enabled": false
    },
    "partitionedModel": {
      "ssdSelection": {
        "useMemTable": false,
        "filter": {
          "distinct": false,
          "enabled": false
        },
        "latestPartitionsN": 1,
        "maxRecords": -1,
        "ordering": {
          "rules": [],
          "enabled": false
        },
        "withinFirstN": -1,
        "partitionSelectionMethod": "ALL",
        "targetRatio": 0.02,
        "maxReadUncompressedBytes": -1,
        "samplingMethod": "FULL"
      },
      "enabled": false
    },
    "calibration": {
      "calibrationMethod": "NO_CALIBRATION"
    },
    "prediction_type": "MULTICLASS"
  },
  "operationMode": "TRAIN_SPLITTED_ONLY",
  "partSource": "ACTIVE_VERSION",
  "envName": "Python_DL",
  "assertionsParams": {
    "assertions": []
  },
  "splitParams": {
    "testOnLargerValues": true,
    "instanceIdRefresher": 1,
    "ssdSeed": 1337,
    "nFolds": 5,
    "subSamplingSeed": 1337,
    "ssdSplitMode": "RANDOM",
    "splitBeforePrepare": true,
    "ssdSelection": {
      "useMemTable": false,
      "filter": {
        "distinct": false,
        "enabled": false
      },
      "latestPartitionsN": 1,
      "maxRecords": 60000,
      "ordering": {
        "rules": [],
        "enabled": false
      },
      "withinFirstN": -1,
      "partitionSelectionMethod": "ALL",
      "targetRatio": 0.02,
      "maxReadUncompressedBytes": -1,
      "samplingMethod": "HEAD_SEQUENTIAL"
    },
    "ssdTrainingRatio": 0.8,
    "ttPolicy": "SPLIT_SINGLE_DATASET",
    "kfold": false
  },
  "sparkParams": {
    "pipelineAllowMerge": true,
    "sparkPreparedDFStorageLevel": "MEMORY_AND_DISK",
    "pipelineAllowStart": true,
    "sparkExecutionEngine": "SPARK_SUBMIT",
    "sparkConf": {
      "inheritConf": "default",
      "conf": []
    },
    "sparkRepartitionNonHDFS": 1,
    "sparkUseGlobalMetastore": false
  }
}